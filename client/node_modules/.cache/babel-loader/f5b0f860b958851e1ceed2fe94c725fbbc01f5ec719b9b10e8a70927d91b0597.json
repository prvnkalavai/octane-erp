{"ast":null,"code":"var _s = $RefreshSig$();\n/**\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nimport { useState, useEffect } from \"react\";\nexport function useScreenCapture() {\n  _s();\n  const [stream, setStream] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n  useEffect(() => {\n    const handleStreamEnded = () => {\n      setIsStreaming(false);\n      setStream(null);\n    };\n    if (stream) {\n      stream.getTracks().forEach(track => track.addEventListener(\"ended\", handleStreamEnded));\n      return () => {\n        stream.getTracks().forEach(track => track.removeEventListener(\"ended\", handleStreamEnded));\n      };\n    }\n  }, [stream]);\n  const start = async () => {\n    // const controller = new CaptureController();\n    // controller.setFocusBehavior(\"no-focus-change\");\n    const mediaStream = await navigator.mediaDevices.getDisplayMedia({\n      video: true\n      // controller\n    });\n    setStream(mediaStream);\n    setIsStreaming(true);\n    return mediaStream;\n  };\n  const stop = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n      setIsStreaming(false);\n    }\n  };\n  const result = {\n    type: \"screen\",\n    start,\n    stop,\n    isStreaming,\n    stream\n  };\n  return result;\n}\n_s(useScreenCapture, \"LGaKB8ZWXbXw/S7EGM0YveG2ZTI=\");","map":{"version":3,"names":["useState","useEffect","useScreenCapture","_s","stream","setStream","isStreaming","setIsStreaming","handleStreamEnded","getTracks","forEach","track","addEventListener","removeEventListener","start","mediaStream","navigator","mediaDevices","getDisplayMedia","video","stop","result","type"],"sources":["C:/Users/prave/Repos/octane-erp/client/src/hooks/use-screen-capture.ts"],"sourcesContent":["/**\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { UseMediaStreamResult } from \"./use-media-stream-mux\";\r\n\r\nexport function useScreenCapture(): UseMediaStreamResult {\r\n  const [stream, setStream] = useState<MediaStream | null>(null);\r\n  const [isStreaming, setIsStreaming] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handleStreamEnded = () => {\r\n      setIsStreaming(false);\r\n      setStream(null);\r\n    };\r\n    if (stream) {\r\n      stream\r\n        .getTracks()\r\n        .forEach((track) => track.addEventListener(\"ended\", handleStreamEnded));\r\n      return () => {\r\n        stream\r\n          .getTracks()\r\n          .forEach((track) =>\r\n            track.removeEventListener(\"ended\", handleStreamEnded),\r\n          );\r\n      };\r\n    }\r\n  }, [stream]);\r\n\r\n  const start = async () => {\r\n    // const controller = new CaptureController();\r\n    // controller.setFocusBehavior(\"no-focus-change\");\r\n    const mediaStream = await navigator.mediaDevices.getDisplayMedia({\r\n      video: true,\r\n      // controller\r\n    });\r\n    setStream(mediaStream);\r\n    setIsStreaming(true);\r\n    return mediaStream;\r\n  };\r\n\r\n  const stop = () => {\r\n    if (stream) {\r\n      stream.getTracks().forEach((track) => track.stop());\r\n      setStream(null);\r\n      setIsStreaming(false);\r\n    }\r\n  };\r\n\r\n  const result: UseMediaStreamResult = {\r\n    type: \"screen\",\r\n    start,\r\n    stop,\r\n    isStreaming,\r\n    stream,\r\n  };\r\n\r\n  return result;\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAG3C,OAAO,SAASC,gBAAgBA,CAAA,EAAyB;EAAAC,EAAA;EACvD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAqB,IAAI,CAAC;EAC9D,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,MAAM;IACd,MAAMO,iBAAiB,GAAGA,CAAA,KAAM;MAC9BD,cAAc,CAAC,KAAK,CAAC;MACrBF,SAAS,CAAC,IAAI,CAAC;IACjB,CAAC;IACD,IAAID,MAAM,EAAE;MACVA,MAAM,CACHK,SAAS,CAAC,CAAC,CACXC,OAAO,CAAEC,KAAK,IAAKA,KAAK,CAACC,gBAAgB,CAAC,OAAO,EAAEJ,iBAAiB,CAAC,CAAC;MACzE,OAAO,MAAM;QACXJ,MAAM,CACHK,SAAS,CAAC,CAAC,CACXC,OAAO,CAAEC,KAAK,IACbA,KAAK,CAACE,mBAAmB,CAAC,OAAO,EAAEL,iBAAiB,CACtD,CAAC;MACL,CAAC;IACH;EACF,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;EAEZ,MAAMU,KAAK,GAAG,MAAAA,CAAA,KAAY;IACxB;IACA;IACA,MAAMC,WAAW,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,eAAe,CAAC;MAC/DC,KAAK,EAAE;MACP;IACF,CAAC,CAAC;IACFd,SAAS,CAACU,WAAW,CAAC;IACtBR,cAAc,CAAC,IAAI,CAAC;IACpB,OAAOQ,WAAW;EACpB,CAAC;EAED,MAAMK,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAIhB,MAAM,EAAE;MACVA,MAAM,CAACK,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEC,KAAK,IAAKA,KAAK,CAACS,IAAI,CAAC,CAAC,CAAC;MACnDf,SAAS,CAAC,IAAI,CAAC;MACfE,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAED,MAAMc,MAA4B,GAAG;IACnCC,IAAI,EAAE,QAAQ;IACdR,KAAK;IACLM,IAAI;IACJd,WAAW;IACXF;EACF,CAAC;EAED,OAAOiB,MAAM;AACf;AAAClB,EAAA,CApDeD,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}