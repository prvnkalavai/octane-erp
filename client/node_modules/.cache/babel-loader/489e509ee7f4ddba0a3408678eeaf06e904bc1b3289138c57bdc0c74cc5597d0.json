{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prave\\\\Repos\\\\octane-erp\\\\src\\\\components\\\\altair\\\\Altair.tsx\",\n  _s = $RefreshSig$();\n/**\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport { SchemaType } from \"@google/generative-ai\";\nimport { useEffect, useRef, useState, memo } from \"react\";\nimport vegaEmbed from \"vega-embed\";\nimport { useLiveAPIContext } from \"../../contexts/LiveAPIContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst declaration = {\n  name: \"render_altair\",\n  description: \"Displays an altair graph in json format.\",\n  parameters: {\n    type: SchemaType.OBJECT,\n    properties: {\n      json_graph: {\n        type: SchemaType.STRING,\n        description: \"JSON STRING representation of the graph to render. Must be a string, not a json object\"\n      }\n    },\n    required: [\"json_graph\"]\n  }\n};\nfunction AltairComponent() {\n  _s();\n  const [jsonString, setJSONString] = useState(\"\");\n  const {\n    client,\n    setConfig\n  } = useLiveAPIContext();\n  useEffect(() => {\n    setConfig({\n      model: \"models/gemini-2.0-flash-exp\",\n      generationConfig: {\n        responseModalities: \"audio\",\n        speechConfig: {\n          voiceConfig: {\n            prebuiltVoiceConfig: {\n              voiceName: \"Aoede\"\n            }\n          }\n        }\n      },\n      systemInstruction: {\n        parts: [{\n          text: 'You are my helpful assistant. Any time I ask you for a graph call the \"render_altair\" function I have provided you. Dont ask for additional information just make your best judgement.'\n        }]\n      },\n      tools: [\n      // there is a free-tier quota for search\n      {\n        googleSearch: {}\n      }, {\n        functionDeclarations: [declaration]\n      }]\n    });\n  }, [setConfig]);\n  useEffect(() => {\n    const onToolCall = toolCall => {\n      console.log(`got toolcall`, toolCall);\n      const fc = toolCall.functionCalls.find(fc => fc.name === declaration.name);\n      if (fc) {\n        const str = fc.args.json_graph;\n        setJSONString(str);\n      }\n      // send data for the response of your tool call\n      // in this case Im just saying it was successful\n      if (toolCall.functionCalls.length) {\n        setTimeout(() => client.sendToolResponse({\n          functionResponses: toolCall.functionCalls.map(fc => ({\n            response: {\n              output: {\n                sucess: true\n              }\n            },\n            id: fc.id\n          }))\n        }), 200);\n      }\n    };\n    client.on(\"toolcall\", onToolCall);\n    return () => {\n      client.off(\"toolcall\", onToolCall);\n    };\n  }, [client]);\n  const embedRef = useRef(null);\n  useEffect(() => {\n    if (embedRef.current && jsonString) {\n      vegaEmbed(embedRef.current, JSON.parse(jsonString));\n    }\n  }, [embedRef, jsonString]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"vega-embed\",\n    ref: embedRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 10\n  }, this);\n}\n_s(AltairComponent, \"jjT3LQDclk9BaSLM1b8ldtYjNLs=\", false, function () {\n  return [useLiveAPIContext];\n});\n_c = AltairComponent;\nexport const Altair = /*#__PURE__*/memo(AltairComponent);\n_c2 = Altair;\nvar _c, _c2;\n$RefreshReg$(_c, \"AltairComponent\");\n$RefreshReg$(_c2, \"Altair\");","map":{"version":3,"names":["SchemaType","useEffect","useRef","useState","memo","vegaEmbed","useLiveAPIContext","jsxDEV","_jsxDEV","declaration","name","description","parameters","type","OBJECT","properties","json_graph","STRING","required","AltairComponent","_s","jsonString","setJSONString","client","setConfig","model","generationConfig","responseModalities","speechConfig","voiceConfig","prebuiltVoiceConfig","voiceName","systemInstruction","parts","text","tools","googleSearch","functionDeclarations","onToolCall","toolCall","console","log","fc","functionCalls","find","str","args","length","setTimeout","sendToolResponse","functionResponses","map","response","output","sucess","id","on","off","embedRef","current","JSON","parse","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","Altair","_c2","$RefreshReg$"],"sources":["C:/Users/prave/Repos/octane-erp/src/components/altair/Altair.tsx"],"sourcesContent":["/**\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { type FunctionDeclaration, SchemaType } from \"@google/generative-ai\";\r\nimport { useEffect, useRef, useState, memo } from \"react\";\r\nimport vegaEmbed from \"vega-embed\";\r\nimport { useLiveAPIContext } from \"../../contexts/LiveAPIContext\";\r\nimport { ToolCall } from \"../../multimodal-live-types\";\r\n\r\nconst declaration: FunctionDeclaration = {\r\n  name: \"render_altair\",\r\n  description: \"Displays an altair graph in json format.\",\r\n  parameters: {\r\n    type: SchemaType.OBJECT,\r\n    properties: {\r\n      json_graph: {\r\n        type: SchemaType.STRING,\r\n        description:\r\n          \"JSON STRING representation of the graph to render. Must be a string, not a json object\",\r\n      },\r\n    },\r\n    required: [\"json_graph\"],\r\n  },\r\n};\r\n\r\nfunction AltairComponent() {\r\n  const [jsonString, setJSONString] = useState<string>(\"\");\r\n  const { client, setConfig } = useLiveAPIContext();\r\n\r\n  useEffect(() => {\r\n    setConfig({\r\n      model: \"models/gemini-2.0-flash-exp\",\r\n      generationConfig: {\r\n        responseModalities: \"audio\",\r\n        speechConfig: {\r\n          voiceConfig: { prebuiltVoiceConfig: { voiceName: \"Aoede\" } },\r\n        },\r\n      },\r\n      systemInstruction: {\r\n        parts: [\r\n          {\r\n            text: 'You are my helpful assistant. Any time I ask you for a graph call the \"render_altair\" function I have provided you. Dont ask for additional information just make your best judgement.',\r\n          },\r\n        ],\r\n      },\r\n      tools: [\r\n        // there is a free-tier quota for search\r\n        { googleSearch: {} },\r\n        { functionDeclarations: [declaration] },\r\n      ],\r\n    });\r\n  }, [setConfig]);\r\n\r\n  useEffect(() => {\r\n    const onToolCall = (toolCall: ToolCall) => {\r\n      console.log(`got toolcall`, toolCall);\r\n      const fc = toolCall.functionCalls.find(\r\n        (fc) => fc.name === declaration.name,\r\n      );\r\n      if (fc) {\r\n        const str = (fc.args as any).json_graph;\r\n        setJSONString(str);\r\n      }\r\n      // send data for the response of your tool call\r\n      // in this case Im just saying it was successful\r\n      if (toolCall.functionCalls.length) {\r\n        setTimeout(\r\n          () =>\r\n            client.sendToolResponse({\r\n              functionResponses: toolCall.functionCalls.map((fc) => ({\r\n                response: { output: { sucess: true } },\r\n                id: fc.id,\r\n              })),\r\n            }),\r\n          200,\r\n        );\r\n      }\r\n    };\r\n    client.on(\"toolcall\", onToolCall);\r\n    return () => {\r\n      client.off(\"toolcall\", onToolCall);\r\n    };\r\n  }, [client]);\r\n\r\n  const embedRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (embedRef.current && jsonString) {\r\n      vegaEmbed(embedRef.current, JSON.parse(jsonString));\r\n    }\r\n  }, [embedRef, jsonString]);\r\n  return <div className=\"vega-embed\" ref={embedRef} />;\r\n}\r\n\r\nexport const Altair = memo(AltairComponent);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}