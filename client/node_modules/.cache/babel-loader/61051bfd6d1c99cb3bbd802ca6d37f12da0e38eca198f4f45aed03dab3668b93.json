{"ast":null,"code":"import { array } from 'vega-util';\nimport * as log from '../log';\nimport { isLayerSpec, isUnitSpec } from '../spec';\nimport { keys } from '../util';\nimport { assembleAxisSignals } from './axis/assemble';\nimport { parseLayerAxes } from './axis/parse';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseLayerLayoutSize } from './layoutsize/parse';\nimport { assembleLegends } from './legend/assemble';\nimport { Model } from './model';\nimport { assembleLayerSelectionMarks } from './selection/assemble';\nimport { UnitModel } from './unit';\nimport { isTimerSelection } from './selection';\nimport { MULTI_VIEW_ANIMATION_UNSUPPORTED } from '../log/message';\nexport class LayerModel extends Model {\n  constructor(spec, parent, parentGivenName, parentGivenSize, config) {\n    super(spec, 'layer', parent, parentGivenName, config, spec.resolve, spec.view);\n    const layoutSize = {\n      ...parentGivenSize,\n      ...(spec.width ? {\n        width: spec.width\n      } : {}),\n      ...(spec.height ? {\n        height: spec.height\n      } : {})\n    };\n    this.children = spec.layer.map((layer, i) => {\n      if (isLayerSpec(layer)) {\n        return new LayerModel(layer, this, this.getName(`layer_${i}`), layoutSize, config);\n      } else if (isUnitSpec(layer)) {\n        return new UnitModel(layer, this, this.getName(`layer_${i}`), layoutSize, config);\n      }\n      throw new Error(log.message.invalidSpec(layer));\n    });\n  }\n  parseData() {\n    this.component.data = parseData(this);\n    for (const child of this.children) {\n      child.parseData();\n    }\n  }\n  parseLayoutSize() {\n    parseLayerLayoutSize(this);\n  }\n  parseSelections() {\n    // Merge selections up the hierarchy so that they may be referenced\n    // across unit specs. Persist their definitions within each child\n    // to assemble signals which remain within output Vega unit groups.\n    this.component.selection = {};\n    for (const child of this.children) {\n      child.parseSelections();\n      for (const key of keys(child.component.selection)) {\n        this.component.selection[key] = child.component.selection[key];\n      }\n    }\n    if (Object.values(this.component.selection).some(selCmpt => isTimerSelection(selCmpt))) {\n      log.error(MULTI_VIEW_ANIMATION_UNSUPPORTED);\n    }\n  }\n  parseMarkGroup() {\n    for (const child of this.children) {\n      child.parseMarkGroup();\n    }\n  }\n  parseAxesAndHeaders() {\n    parseLayerAxes(this);\n  }\n  assembleSelectionTopLevelSignals(signals) {\n    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n  }\n  // TODO: Support same named selections across children.\n  assembleSignals() {\n    return this.children.reduce((signals, child) => {\n      return signals.concat(child.assembleSignals());\n    }, assembleAxisSignals(this));\n  }\n  assembleLayoutSignals() {\n    return this.children.reduce((signals, child) => {\n      return signals.concat(child.assembleLayoutSignals());\n    }, assembleLayoutSignals(this));\n  }\n  assembleSelectionData(data) {\n    return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n  }\n  assembleGroupStyle() {\n    const uniqueStyles = new Set();\n    for (const child of this.children) {\n      for (const style of array(child.assembleGroupStyle())) {\n        uniqueStyles.add(style);\n      }\n    }\n    const styles = Array.from(uniqueStyles);\n    return styles.length > 1 ? styles : styles.length === 1 ? styles[0] : undefined;\n  }\n  assembleTitle() {\n    let title = super.assembleTitle();\n    if (title) {\n      return title;\n    }\n    // If title does not provide layer, look into children\n    for (const child of this.children) {\n      title = child.assembleTitle();\n      if (title) {\n        return title;\n      }\n    }\n    return undefined;\n  }\n  assembleLayout() {\n    return null;\n  }\n  assembleMarks() {\n    return assembleLayerSelectionMarks(this, this.children.flatMap(child => {\n      return child.assembleMarks();\n    }));\n  }\n  assembleLegends() {\n    return this.children.reduce((legends, child) => {\n      return legends.concat(child.assembleLegends());\n    }, assembleLegends(this));\n  }\n}","map":{"version":3,"names":["array","log","isLayerSpec","isUnitSpec","keys","assembleAxisSignals","parseLayerAxes","parseData","assembleLayoutSignals","parseLayerLayoutSize","assembleLegends","Model","assembleLayerSelectionMarks","UnitModel","isTimerSelection","MULTI_VIEW_ANIMATION_UNSUPPORTED","LayerModel","constructor","spec","parent","parentGivenName","parentGivenSize","config","resolve","view","layoutSize","width","height","children","layer","map","i","getName","Error","message","invalidSpec","component","data","child","parseLayoutSize","parseSelections","selection","key","Object","values","some","selCmpt","error","parseMarkGroup","parseAxesAndHeaders","assembleSelectionTopLevelSignals","signals","reduce","sg","assembleSignals","concat","assembleSelectionData","db","assembleGroupStyle","uniqueStyles","Set","style","add","styles","Array","from","length","undefined","assembleTitle","title","assembleLayout","assembleMarks","flatMap","legends"],"sources":["C:\\Users\\prave\\Repos\\octane-erp\\client\\node_modules\\vega-lite\\src\\compile\\layer.ts"],"sourcesContent":["import {Legend as VgLegend, NewSignal, SignalRef, Title as VgTitle} from 'vega';\nimport {array} from 'vega-util';\nimport {Config} from '../config';\nimport * as log from '../log';\nimport {isLayerSpec, isUnitSpec, LayoutSizeMixins, NormalizedLayerSpec} from '../spec';\nimport {keys} from '../util';\nimport {VgData, VgLayout} from '../vega.schema';\nimport {assembleAxisSignals} from './axis/assemble';\nimport {parseLayerAxes} from './axis/parse';\nimport {parseData} from './data/parse';\nimport {assembleLayoutSignals} from './layoutsize/assemble';\nimport {parseLayerLayoutSize} from './layoutsize/parse';\nimport {assembleLegends} from './legend/assemble';\nimport {Model} from './model';\nimport {assembleLayerSelectionMarks} from './selection/assemble';\nimport {UnitModel} from './unit';\nimport {isTimerSelection} from './selection';\nimport {MULTI_VIEW_ANIMATION_UNSUPPORTED} from '../log/message';\n\nexport class LayerModel extends Model {\n  // HACK: This should be (LayerModel | UnitModel)[], but setting the correct type leads to weird error.\n  // So I'm just putting generic Model for now\n  public readonly children: Model[];\n\n  constructor(\n    spec: NormalizedLayerSpec,\n    parent: Model,\n    parentGivenName: string,\n    parentGivenSize: LayoutSizeMixins,\n    config: Config<SignalRef>\n  ) {\n    super(spec, 'layer', parent, parentGivenName, config, spec.resolve, spec.view);\n\n    const layoutSize = {\n      ...parentGivenSize,\n      ...(spec.width ? {width: spec.width} : {}),\n      ...(spec.height ? {height: spec.height} : {})\n    };\n\n    this.children = spec.layer.map((layer, i) => {\n      if (isLayerSpec(layer)) {\n        return new LayerModel(layer, this, this.getName(`layer_${i}`), layoutSize, config);\n      } else if (isUnitSpec(layer)) {\n        return new UnitModel(layer, this, this.getName(`layer_${i}`), layoutSize, config);\n      }\n\n      throw new Error(log.message.invalidSpec(layer));\n    });\n  }\n\n  public parseData() {\n    this.component.data = parseData(this);\n    for (const child of this.children) {\n      child.parseData();\n    }\n  }\n\n  public parseLayoutSize() {\n    parseLayerLayoutSize(this);\n  }\n\n  public parseSelections() {\n    // Merge selections up the hierarchy so that they may be referenced\n    // across unit specs. Persist their definitions within each child\n    // to assemble signals which remain within output Vega unit groups.\n    this.component.selection = {};\n    for (const child of this.children) {\n      child.parseSelections();\n      for (const key of keys(child.component.selection)) {\n        this.component.selection[key] = child.component.selection[key];\n      }\n    }\n\n    if (Object.values(this.component.selection).some(selCmpt => isTimerSelection(selCmpt))) {\n      log.error(MULTI_VIEW_ANIMATION_UNSUPPORTED);\n    }\n  }\n\n  public parseMarkGroup() {\n    for (const child of this.children) {\n      child.parseMarkGroup();\n    }\n  }\n\n  public parseAxesAndHeaders() {\n    parseLayerAxes(this);\n  }\n\n  public assembleSelectionTopLevelSignals(signals: NewSignal[]): NewSignal[] {\n    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n  }\n\n  // TODO: Support same named selections across children.\n  public assembleSignals(): NewSignal[] {\n    return this.children.reduce((signals, child) => {\n      return signals.concat(child.assembleSignals());\n    }, assembleAxisSignals(this));\n  }\n\n  public assembleLayoutSignals(): NewSignal[] {\n    return this.children.reduce((signals, child) => {\n      return signals.concat(child.assembleLayoutSignals());\n    }, assembleLayoutSignals(this));\n  }\n\n  public assembleSelectionData(data: readonly VgData[]): readonly VgData[] {\n    return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n  }\n\n  public assembleGroupStyle(): string | string[] {\n    const uniqueStyles = new Set<string>();\n    for (const child of this.children) {\n      for (const style of array(child.assembleGroupStyle())) {\n        uniqueStyles.add(style);\n      }\n    }\n    const styles = Array.from(uniqueStyles);\n    return styles.length > 1 ? styles : styles.length === 1 ? styles[0] : undefined;\n  }\n\n  public assembleTitle(): VgTitle {\n    let title = super.assembleTitle();\n    if (title) {\n      return title;\n    }\n    // If title does not provide layer, look into children\n    for (const child of this.children) {\n      title = child.assembleTitle();\n      if (title) {\n        return title;\n      }\n    }\n    return undefined;\n  }\n\n  public assembleLayout(): VgLayout {\n    return null;\n  }\n\n  public assembleMarks(): any[] {\n    return assembleLayerSelectionMarks(\n      this,\n      this.children.flatMap(child => {\n        return child.assembleMarks();\n      })\n    );\n  }\n\n  public assembleLegends(): VgLegend[] {\n    return this.children.reduce((legends, child) => {\n      return legends.concat(child.assembleLegends());\n    }, assembleLegends(this));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}