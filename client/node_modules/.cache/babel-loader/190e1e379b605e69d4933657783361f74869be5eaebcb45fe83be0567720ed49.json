{"ast":null,"code":"var _s = $RefreshSig$();\n/**\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { MultimodalLiveClient } from \"../lib/multimodal-live-client\";\nimport { AudioStreamer } from \"../lib/audio-streamer\";\nimport { audioContext } from \"../lib/utils\";\nimport VolMeterWorket from \"../lib/worklets/vol-meter\";\nexport function useLiveAPI({\n  url,\n  apiKey\n}) {\n  _s();\n  const client = useMemo(() => new MultimodalLiveClient({\n    url,\n    apiKey\n  }), [url, apiKey]);\n  const audioStreamerRef = useRef(null);\n  const [connected, setConnected] = useState(false);\n  const [config, setConfig] = useState({\n    model: \"models/gemini-2.0-flash-exp\"\n  });\n  const [volume, setVolume] = useState(0);\n\n  // register audio for streaming server -> speakers\n  useEffect(() => {\n    if (!audioStreamerRef.current) {\n      audioContext({\n        id: \"audio-out\"\n      }).then(audioCtx => {\n        audioStreamerRef.current = new AudioStreamer(audioCtx);\n        audioStreamerRef.current.addWorklet(\"vumeter-out\", VolMeterWorket, ev => {\n          setVolume(ev.data.volume);\n        }).then(() => {\n          // Successfully added worklet\n        });\n      });\n    }\n  }, [audioStreamerRef]);\n  useEffect(() => {\n    const onClose = () => {\n      setConnected(false);\n    };\n    const stopAudioStreamer = () => {\n      var _audioStreamerRef$cur;\n      return (_audioStreamerRef$cur = audioStreamerRef.current) === null || _audioStreamerRef$cur === void 0 ? void 0 : _audioStreamerRef$cur.stop();\n    };\n    const onAudio = data => {\n      var _audioStreamerRef$cur2;\n      return (_audioStreamerRef$cur2 = audioStreamerRef.current) === null || _audioStreamerRef$cur2 === void 0 ? void 0 : _audioStreamerRef$cur2.addPCM16(new Uint8Array(data));\n    };\n    client.on(\"close\", onClose).on(\"interrupted\", stopAudioStreamer).on(\"audio\", onAudio);\n    return () => {\n      client.off(\"close\", onClose).off(\"interrupted\", stopAudioStreamer).off(\"audio\", onAudio);\n    };\n  }, [client]);\n  const connect = useCallback(async () => {\n    console.log(config);\n    if (!config) {\n      throw new Error(\"config has not been set\");\n    }\n    client.disconnect();\n    await client.connect(config);\n    setConnected(true);\n  }, [client, setConnected, config]);\n  const disconnect = useCallback(async () => {\n    client.disconnect();\n    setConnected(false);\n  }, [setConnected, client]);\n  return {\n    client,\n    config,\n    setConfig,\n    connected,\n    connect,\n    disconnect,\n    volume\n  };\n}\n_s(useLiveAPI, \"yCUK9ltQmoT+iEFNQTF+iJD/uMk=\");","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","useState","MultimodalLiveClient","AudioStreamer","audioContext","VolMeterWorket","useLiveAPI","url","apiKey","_s","client","audioStreamerRef","connected","setConnected","config","setConfig","model","volume","setVolume","current","id","then","audioCtx","addWorklet","ev","data","onClose","stopAudioStreamer","_audioStreamerRef$cur","stop","onAudio","_audioStreamerRef$cur2","addPCM16","Uint8Array","on","off","connect","console","log","Error","disconnect"],"sources":["C:/Users/prave/Repos/octane-erp/src/hooks/use-live-api.ts"],"sourcesContent":["/**\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport {\r\n  MultimodalLiveAPIClientConnection,\r\n  MultimodalLiveClient,\r\n} from \"../lib/multimodal-live-client\";\r\nimport { LiveConfig } from \"../multimodal-live-types\";\r\nimport { AudioStreamer } from \"../lib/audio-streamer\";\r\nimport { audioContext } from \"../lib/utils\";\r\nimport VolMeterWorket from \"../lib/worklets/vol-meter\";\r\n\r\nexport type UseLiveAPIResults = {\r\n  client: MultimodalLiveClient;\r\n  setConfig: (config: LiveConfig) => void;\r\n  config: LiveConfig;\r\n  connected: boolean;\r\n  connect: () => Promise<void>;\r\n  disconnect: () => Promise<void>;\r\n  volume: number;\r\n};\r\n\r\nexport function useLiveAPI({\r\n  url,\r\n  apiKey,\r\n}: MultimodalLiveAPIClientConnection): UseLiveAPIResults {\r\n  const client = useMemo(\r\n    () => new MultimodalLiveClient({ url, apiKey }),\r\n    [url, apiKey],\r\n  );\r\n  const audioStreamerRef = useRef<AudioStreamer | null>(null);\r\n\r\n  const [connected, setConnected] = useState(false);\r\n  const [config, setConfig] = useState<LiveConfig>({\r\n    model: \"models/gemini-2.0-flash-exp\",\r\n  });\r\n  const [volume, setVolume] = useState(0);\r\n\r\n  // register audio for streaming server -> speakers\r\n  useEffect(() => {\r\n    if (!audioStreamerRef.current) {\r\n      audioContext({ id: \"audio-out\" }).then((audioCtx: AudioContext) => {\r\n        audioStreamerRef.current = new AudioStreamer(audioCtx);\r\n        audioStreamerRef.current\r\n          .addWorklet<any>(\"vumeter-out\", VolMeterWorket, (ev: any) => {\r\n            setVolume(ev.data.volume);\r\n          })\r\n          .then(() => {\r\n            // Successfully added worklet\r\n          });\r\n      });\r\n    }\r\n  }, [audioStreamerRef]);\r\n\r\n  useEffect(() => {\r\n    const onClose = () => {\r\n      setConnected(false);\r\n    };\r\n\r\n    const stopAudioStreamer = () => audioStreamerRef.current?.stop();\r\n\r\n    const onAudio = (data: ArrayBuffer) =>\r\n      audioStreamerRef.current?.addPCM16(new Uint8Array(data));\r\n\r\n    client\r\n      .on(\"close\", onClose)\r\n      .on(\"interrupted\", stopAudioStreamer)\r\n      .on(\"audio\", onAudio);\r\n\r\n    return () => {\r\n      client\r\n        .off(\"close\", onClose)\r\n        .off(\"interrupted\", stopAudioStreamer)\r\n        .off(\"audio\", onAudio);\r\n    };\r\n  }, [client]);\r\n\r\n  const connect = useCallback(async () => {\r\n    console.log(config);\r\n    if (!config) {\r\n      throw new Error(\"config has not been set\");\r\n    }\r\n    client.disconnect();\r\n    await client.connect(config);\r\n    setConnected(true);\r\n  }, [client, setConnected, config]);\r\n\r\n  const disconnect = useCallback(async () => {\r\n    client.disconnect();\r\n    setConnected(false);\r\n  }, [setConnected, client]);\r\n\r\n  return {\r\n    client,\r\n    config,\r\n    setConfig,\r\n    connected,\r\n    connect,\r\n    disconnect,\r\n    volume,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}