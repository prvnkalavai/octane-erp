{"ast":null,"code":"/**\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst VolMeterWorket = `\n  class VolMeter extends AudioWorkletProcessor {\n    volume\n    updateIntervalInMS\n    nextUpdateFrame\n\n    constructor() {\n      super()\n      this.volume = 0\n      this.updateIntervalInMS = 25\n      this.nextUpdateFrame = this.updateIntervalInMS\n      this.port.onmessage = event => {\n        if (event.data.updateIntervalInMS) {\n          this.updateIntervalInMS = event.data.updateIntervalInMS\n        }\n      }\n    }\n\n    get intervalInFrames() {\n      return (this.updateIntervalInMS / 1000) * sampleRate\n    }\n\n    process(inputs) {\n      const input = inputs[0]\n\n      if (input.length > 0) {\n        const samples = input[0]\n        let sum = 0\n        let rms = 0\n\n        for (let i = 0; i < samples.length; ++i) {\n          sum += samples[i] * samples[i]\n        }\n\n        rms = Math.sqrt(sum / samples.length)\n        this.volume = Math.max(rms, this.volume * 0.7)\n\n        this.nextUpdateFrame -= samples.length\n        if (this.nextUpdateFrame < 0) {\n          this.nextUpdateFrame += this.intervalInFrames\n          this.port.postMessage({volume: this.volume})\n        }\n      }\n\n      return true\n    }\n  }`;\nexport default VolMeterWorket;","map":{"version":3,"names":["VolMeterWorket"],"sources":["C:/Users/prave/Repos/octane-erp/src/lib/worklets/vol-meter.ts"],"sourcesContent":["/**\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nconst VolMeterWorket = `\r\n  class VolMeter extends AudioWorkletProcessor {\r\n    volume\r\n    updateIntervalInMS\r\n    nextUpdateFrame\r\n\r\n    constructor() {\r\n      super()\r\n      this.volume = 0\r\n      this.updateIntervalInMS = 25\r\n      this.nextUpdateFrame = this.updateIntervalInMS\r\n      this.port.onmessage = event => {\r\n        if (event.data.updateIntervalInMS) {\r\n          this.updateIntervalInMS = event.data.updateIntervalInMS\r\n        }\r\n      }\r\n    }\r\n\r\n    get intervalInFrames() {\r\n      return (this.updateIntervalInMS / 1000) * sampleRate\r\n    }\r\n\r\n    process(inputs) {\r\n      const input = inputs[0]\r\n\r\n      if (input.length > 0) {\r\n        const samples = input[0]\r\n        let sum = 0\r\n        let rms = 0\r\n\r\n        for (let i = 0; i < samples.length; ++i) {\r\n          sum += samples[i] * samples[i]\r\n        }\r\n\r\n        rms = Math.sqrt(sum / samples.length)\r\n        this.volume = Math.max(rms, this.volume * 0.7)\r\n\r\n        this.nextUpdateFrame -= samples.length\r\n        if (this.nextUpdateFrame < 0) {\r\n          this.nextUpdateFrame += this.intervalInFrames\r\n          this.port.postMessage({volume: this.volume})\r\n        }\r\n      }\r\n\r\n      return true\r\n    }\r\n  }`;\r\n\r\nexport default VolMeterWorket;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,cAAc,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AAEJ,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}