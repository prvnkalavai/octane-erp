{"ast":null,"code":"/**\n * Vega-Lite's singleton logger utility.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LocalLogger_level;\nimport { Debug, Error as ErrorLevel, Info, logger, Warn } from 'vega-util';\nimport * as _message from './message';\nexport { _message as message };\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\nconst main = logger(Warn);\nlet current = main;\n/**\n * Logger tool for checking if the code throws correct warning.\n */\nexport class LocalLogger {\n  constructor() {\n    this.warns = [];\n    this.infos = [];\n    this.debugs = [];\n    _LocalLogger_level.set(this, Warn);\n  }\n  level(_) {\n    if (_) {\n      __classPrivateFieldSet(this, _LocalLogger_level, _, \"f\");\n      return this;\n    }\n    return __classPrivateFieldGet(this, _LocalLogger_level, \"f\");\n  }\n  warn(...args) {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Warn) this.warns.push(...args);\n    return this;\n  }\n  info(...args) {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Info) this.infos.push(...args);\n    return this;\n  }\n  debug(...args) {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Debug) this.debugs.push(...args);\n    return this;\n  }\n  error(...args) {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= ErrorLevel) throw Error(...args);\n    return this;\n  }\n}\n_LocalLogger_level = new WeakMap();\nexport function wrap(f) {\n  return () => {\n    current = new LocalLogger();\n    f(current);\n    reset();\n  };\n}\n/**\n * Set the singleton logger to be a custom logger.\n */\nexport function set(newLogger) {\n  current = newLogger;\n  return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger.\n */\nexport function reset() {\n  current = main;\n  return current;\n}\nexport function error(...args) {\n  current.error(...args);\n}\nexport function warn(...args) {\n  current.warn(...args);\n}\nexport function info(...args) {\n  current.info(...args);\n}\nexport function debug(...args) {\n  current.debug(...args);\n}","map":{"version":3,"names":["Debug","Error","ErrorLevel","Info","logger","Warn","_message","message","main","current","LocalLogger","constructor","warns","infos","debugs","_LocalLogger_level","set","level","_","__classPrivateFieldSet","__classPrivateFieldGet","warn","args","push","info","debug","error","wrap","f","reset","newLogger"],"sources":["C:\\Users\\prave\\Repos\\octane-erp\\node_modules\\vega-lite\\src\\log\\index.ts"],"sourcesContent":["/**\n * Vega-Lite's singleton logger utility.\n */\n\nimport {Debug, Error as ErrorLevel, Info, logger, LoggerInterface, Warn} from 'vega-util';\nexport * as message from './message';\n\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\nconst main = logger(Warn);\nlet current: LoggerInterface = main;\n\n/**\n * Logger tool for checking if the code throws correct warning.\n */\nexport class LocalLogger implements LoggerInterface {\n  public warns: any[] = [];\n  public infos: any[] = [];\n  public debugs: any[] = [];\n\n  #level: number = Warn;\n\n  public level(): number;\n  public level(_: number): this;\n  public level(_?: number) {\n    if (_) {\n      this.#level = _;\n      return this;\n    }\n    return this.#level;\n  }\n\n  public warn(...args: readonly any[]) {\n    if (this.#level >= Warn) this.warns.push(...args);\n    return this;\n  }\n\n  public info(...args: readonly any[]) {\n    if (this.#level >= Info) this.infos.push(...args);\n    return this;\n  }\n\n  public debug(...args: readonly any[]) {\n    if (this.#level >= Debug) this.debugs.push(...args);\n    return this;\n  }\n\n  public error(...args: readonly any[]): this {\n    if (this.#level >= ErrorLevel) throw Error(...args);\n    return this;\n  }\n}\n\nexport function wrap(f: (logger: LocalLogger) => void) {\n  return () => {\n    current = new LocalLogger();\n    f(current as LocalLogger);\n    reset();\n  };\n}\n\n/**\n * Set the singleton logger to be a custom logger.\n */\nexport function set(newLogger: LoggerInterface) {\n  current = newLogger;\n  return current;\n}\n\n/**\n * Reset the main logger to use the default Vega Logger.\n */\nexport function reset() {\n  current = main;\n  return current;\n}\n\nexport function error(...args: readonly any[]) {\n  current.error(...args);\n}\n\nexport function warn(...args: readonly any[]) {\n  current.warn(...args);\n}\n\nexport function info(...args: readonly any[]) {\n  current.info(...args);\n}\n\nexport function debug(...args: readonly any[]) {\n  current.debug(...args);\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAIA,SAAQA,KAAK,EAAEC,KAAK,IAAIC,UAAU,EAAEC,IAAI,EAAEC,MAAM,EAAmBC,IAAI,QAAO,WAAW;AAAC,YAAAC,QAAA,MACjE,WAAW;AAAA,SAAAA,QAAA,IAAxBC,OAAO;AAEnB;;;AAGA,MAAMC,IAAI,GAAGJ,MAAM,CAACC,IAAI,CAAC;AACzB,IAAII,OAAO,GAAoBD,IAAI;AAEnC;;;AAGA,OAAM,MAAOE,WAAW;EAAxBC,YAAA;IACS,KAAAC,KAAK,GAAU,EAAE;IACjB,KAAAC,KAAK,GAAU,EAAE;IACjB,KAAAC,MAAM,GAAU,EAAE;IAEzBC,kBAAA,CAAAC,GAAA,OAAiBX,IAAI;EA+BvB;EA3BSY,KAAKA,CAACC,CAAU;IACrB,IAAIA,CAAC,EAAE;MACLC,sBAAA,KAAI,EAAAJ,kBAAA,EAAUG,CAAC;MACf,OAAO,IAAI;IACb;IACA,OAAOE,sBAAA,KAAI,EAAAL,kBAAA,MAAO;EACpB;EAEOM,IAAIA,CAAC,GAAGC,IAAoB;IACjC,IAAIF,sBAAA,KAAI,EAAAL,kBAAA,MAAO,IAAIV,IAAI,EAAE,IAAI,CAACO,KAAK,CAACW,IAAI,CAAC,GAAGD,IAAI,CAAC;IACjD,OAAO,IAAI;EACb;EAEOE,IAAIA,CAAC,GAAGF,IAAoB;IACjC,IAAIF,sBAAA,KAAI,EAAAL,kBAAA,MAAO,IAAIZ,IAAI,EAAE,IAAI,CAACU,KAAK,CAACU,IAAI,CAAC,GAAGD,IAAI,CAAC;IACjD,OAAO,IAAI;EACb;EAEOG,KAAKA,CAAC,GAAGH,IAAoB;IAClC,IAAIF,sBAAA,KAAI,EAAAL,kBAAA,MAAO,IAAIf,KAAK,EAAE,IAAI,CAACc,MAAM,CAACS,IAAI,CAAC,GAAGD,IAAI,CAAC;IACnD,OAAO,IAAI;EACb;EAEOI,KAAKA,CAAC,GAAGJ,IAAoB;IAClC,IAAIF,sBAAA,KAAI,EAAAL,kBAAA,MAAO,IAAIb,UAAU,EAAE,MAAMD,KAAK,CAAC,GAAGqB,IAAI,CAAC;IACnD,OAAO,IAAI;EACb;;;AAGF,OAAM,SAAUK,IAAIA,CAACC,CAAgC;EACnD,OAAO,MAAK;IACVnB,OAAO,GAAG,IAAIC,WAAW,EAAE;IAC3BkB,CAAC,CAACnB,OAAsB,CAAC;IACzBoB,KAAK,EAAE;EACT,CAAC;AACH;AAEA;;;AAGA,OAAM,SAAUb,GAAGA,CAACc,SAA0B;EAC5CrB,OAAO,GAAGqB,SAAS;EACnB,OAAOrB,OAAO;AAChB;AAEA;;;AAGA,OAAM,SAAUoB,KAAKA,CAAA;EACnBpB,OAAO,GAAGD,IAAI;EACd,OAAOC,OAAO;AAChB;AAEA,OAAM,SAAUiB,KAAKA,CAAC,GAAGJ,IAAoB;EAC3Cb,OAAO,CAACiB,KAAK,CAAC,GAAGJ,IAAI,CAAC;AACxB;AAEA,OAAM,SAAUD,IAAIA,CAAC,GAAGC,IAAoB;EAC1Cb,OAAO,CAACY,IAAI,CAAC,GAAGC,IAAI,CAAC;AACvB;AAEA,OAAM,SAAUE,IAAIA,CAAC,GAAGF,IAAoB;EAC1Cb,OAAO,CAACe,IAAI,CAAC,GAAGF,IAAI,CAAC;AACvB;AAEA,OAAM,SAAUG,KAAKA,CAAC,GAAGH,IAAoB;EAC3Cb,OAAO,CAACgB,KAAK,CAAC,GAAGH,IAAI,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}