{"ast":null,"code":"/**\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nimport { create } from \"zustand\";\nexport const useLoggerStore = create((set, get) => ({\n  maxLogs: 500,\n  logs: [],\n  //mockLogs,\n  log: ({\n    date,\n    type,\n    message\n  }) => {\n    set(state => {\n      const prevLog = state.logs.at(-1);\n      if (prevLog && prevLog.type === type && prevLog.message === message) {\n        return {\n          logs: [...state.logs.slice(0, -1), {\n            date,\n            type,\n            message,\n            count: prevLog.count ? prevLog.count + 1 : 1\n          }]\n        };\n      }\n      return {\n        logs: [...state.logs.slice(-(get().maxLogs - 1)), {\n          date,\n          type,\n          message\n        }]\n      };\n    });\n  },\n  clearLogs: () => {\n    console.log(\"clear log\");\n    set({\n      logs: []\n    });\n  },\n  setMaxLogs: n => set({\n    maxLogs: n\n  })\n}));","map":{"version":3,"names":["create","useLoggerStore","set","get","maxLogs","logs","log","date","type","message","state","prevLog","at","slice","count","clearLogs","console","setMaxLogs","n"],"sources":["C:/Users/prave/Repos/octane-erp/src/lib/store-logger.ts"],"sourcesContent":["/**\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { create } from \"zustand\";\r\nimport { StreamingLog } from \"../multimodal-live-types\";\r\nimport { mockLogs } from \"../components/logger/mock-logs\";\r\n\r\ninterface StoreLoggerState {\r\n  maxLogs: number;\r\n  logs: StreamingLog[];\r\n  log: (streamingLog: StreamingLog) => void;\r\n  clearLogs: () => void;\r\n}\r\n\r\nexport const useLoggerStore = create<StoreLoggerState>((set, get) => ({\r\n  maxLogs: 500,\r\n  logs: [], //mockLogs,\r\n  log: ({ date, type, message }: StreamingLog) => {\r\n    set((state) => {\r\n      const prevLog = state.logs.at(-1);\r\n      if (prevLog && prevLog.type === type && prevLog.message === message) {\r\n        return {\r\n          logs: [\r\n            ...state.logs.slice(0, -1),\r\n            {\r\n              date,\r\n              type,\r\n              message,\r\n              count: prevLog.count ? prevLog.count + 1 : 1,\r\n            } as StreamingLog,\r\n          ],\r\n        };\r\n      }\r\n      return {\r\n        logs: [\r\n          ...state.logs.slice(-(get().maxLogs - 1)),\r\n          {\r\n            date,\r\n            type,\r\n            message,\r\n          } as StreamingLog,\r\n        ],\r\n      };\r\n    });\r\n  },\r\n\r\n  clearLogs: () => {\r\n    console.log(\"clear log\");\r\n    set({ logs: [] });\r\n  },\r\n  setMaxLogs: (n: number) => set({ maxLogs: n }),\r\n}));\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,QAAQ,SAAS;AAWhC,OAAO,MAAMC,cAAc,GAAGD,MAAM,CAAmB,CAACE,GAAG,EAAEC,GAAG,MAAM;EACpEC,OAAO,EAAE,GAAG;EACZC,IAAI,EAAE,EAAE;EAAE;EACVC,GAAG,EAAEA,CAAC;IAAEC,IAAI;IAAEC,IAAI;IAAEC;EAAsB,CAAC,KAAK;IAC9CP,GAAG,CAAEQ,KAAK,IAAK;MACb,MAAMC,OAAO,GAAGD,KAAK,CAACL,IAAI,CAACO,EAAE,CAAC,CAAC,CAAC,CAAC;MACjC,IAAID,OAAO,IAAIA,OAAO,CAACH,IAAI,KAAKA,IAAI,IAAIG,OAAO,CAACF,OAAO,KAAKA,OAAO,EAAE;QACnE,OAAO;UACLJ,IAAI,EAAE,CACJ,GAAGK,KAAK,CAACL,IAAI,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAC1B;YACEN,IAAI;YACJC,IAAI;YACJC,OAAO;YACPK,KAAK,EAAEH,OAAO,CAACG,KAAK,GAAGH,OAAO,CAACG,KAAK,GAAG,CAAC,GAAG;UAC7C,CAAC;QAEL,CAAC;MACH;MACA,OAAO;QACLT,IAAI,EAAE,CACJ,GAAGK,KAAK,CAACL,IAAI,CAACQ,KAAK,CAAC,EAAEV,GAAG,CAAC,CAAC,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC,EACzC;UACEG,IAAI;UACJC,IAAI;UACJC;QACF,CAAC;MAEL,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAEDM,SAAS,EAAEA,CAAA,KAAM;IACfC,OAAO,CAACV,GAAG,CAAC,WAAW,CAAC;IACxBJ,GAAG,CAAC;MAAEG,IAAI,EAAE;IAAG,CAAC,CAAC;EACnB,CAAC;EACDY,UAAU,EAAGC,CAAS,IAAKhB,GAAG,CAAC;IAAEE,OAAO,EAAEc;EAAE,CAAC;AAC/C,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}